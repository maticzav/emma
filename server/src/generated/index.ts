// Code generated by Prisma (prisma@1.20.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from 'graphql'
import { makePrismaClientClass, BaseClientOptions } from 'prisma-client-lib'
import { typeDefs } from './prisma-schema'

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U]

export interface Exists {
  boilerplate: (where?: BoilerplateWhereInput) => Promise<boolean>
  installation: (where?: InstallationWhereInput) => Promise<boolean>
  repository: (where?: RepositoryWhereInput) => Promise<boolean>
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>
}

export interface Prisma {
  $exists: Exists
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>

  /**
   * Queries
   */

  boilerplate: (where: BoilerplateWhereUniqueInput) => BoilerplatePromise
  boilerplates: (
    args?: {
      where?: BoilerplateWhereInput
      orderBy?: BoilerplateOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => FragmentableArray<Boilerplate>
  boilerplatesConnection: (
    args?: {
      where?: BoilerplateWhereInput
      orderBy?: BoilerplateOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => BoilerplateConnectionPromise
  installation: (where: InstallationWhereUniqueInput) => InstallationPromise
  installations: (
    args?: {
      where?: InstallationWhereInput
      orderBy?: InstallationOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => FragmentableArray<Installation>
  installationsConnection: (
    args?: {
      where?: InstallationWhereInput
      orderBy?: InstallationOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => InstallationConnectionPromise
  repository: (where: RepositoryWhereUniqueInput) => RepositoryPromise
  repositories: (
    args?: {
      where?: RepositoryWhereInput
      orderBy?: RepositoryOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => FragmentableArray<Repository>
  repositoriesConnection: (
    args?: {
      where?: RepositoryWhereInput
      orderBy?: RepositoryOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => RepositoryConnectionPromise
  node: (args: { id: ID_Output }) => Node

  /**
   * Mutations
   */

  createBoilerplate: (data: BoilerplateCreateInput) => BoilerplatePromise
  updateBoilerplate: (
    args: { data: BoilerplateUpdateInput; where: BoilerplateWhereUniqueInput },
  ) => BoilerplatePromise
  updateManyBoilerplates: (
    args: {
      data: BoilerplateUpdateManyMutationInput
      where?: BoilerplateWhereInput
    },
  ) => BatchPayloadPromise
  upsertBoilerplate: (
    args: {
      where: BoilerplateWhereUniqueInput
      create: BoilerplateCreateInput
      update: BoilerplateUpdateInput
    },
  ) => BoilerplatePromise
  deleteBoilerplate: (where: BoilerplateWhereUniqueInput) => BoilerplatePromise
  deleteManyBoilerplates: (where?: BoilerplateWhereInput) => BatchPayloadPromise
  createInstallation: (data: InstallationCreateInput) => InstallationPromise
  updateInstallation: (
    args: {
      data: InstallationUpdateInput
      where: InstallationWhereUniqueInput
    },
  ) => InstallationPromise
  updateManyInstallations: (
    args: {
      data: InstallationUpdateManyMutationInput
      where?: InstallationWhereInput
    },
  ) => BatchPayloadPromise
  upsertInstallation: (
    args: {
      where: InstallationWhereUniqueInput
      create: InstallationCreateInput
      update: InstallationUpdateInput
    },
  ) => InstallationPromise
  deleteInstallation: (
    where: InstallationWhereUniqueInput,
  ) => InstallationPromise
  deleteManyInstallations: (
    where?: InstallationWhereInput,
  ) => BatchPayloadPromise
  createRepository: (data: RepositoryCreateInput) => RepositoryPromise
  updateRepository: (
    args: { data: RepositoryUpdateInput; where: RepositoryWhereUniqueInput },
  ) => RepositoryPromise
  updateManyRepositories: (
    args: {
      data: RepositoryUpdateManyMutationInput
      where?: RepositoryWhereInput
    },
  ) => BatchPayloadPromise
  upsertRepository: (
    args: {
      where: RepositoryWhereUniqueInput
      create: RepositoryCreateInput
      update: RepositoryUpdateInput
    },
  ) => RepositoryPromise
  deleteRepository: (where: RepositoryWhereUniqueInput) => RepositoryPromise
  deleteManyRepositories: (where?: RepositoryWhereInput) => BatchPayloadPromise

  /**
   * Subscriptions
   */

  $subscribe: Subscription
}

export interface Subscription {
  boilerplate: (
    where?: BoilerplateSubscriptionWhereInput,
  ) => BoilerplateSubscriptionPayloadSubscription
  installation: (
    where?: InstallationSubscriptionWhereInput,
  ) => InstallationSubscriptionPayloadSubscription
  repository: (
    where?: RepositorySubscriptionWhereInput,
  ) => RepositorySubscriptionPayloadSubscription
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T
}

/**
 * Types
 */

export type BoilerplateOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'path_ASC'
  | 'path_DESC'

export type RepositoryOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'githubId_ASC'
  | 'githubId_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'owner_ASC'
  | 'owner_DESC'
  | 'githubIssue_ASC'
  | 'githubIssue_DESC'
  | 'githubPR_ASC'
  | 'githubPR_DESC'

export type InstallationOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'githubId_ASC'
  | 'githubId_DESC'

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export interface RepositoryUpdateWithoutBoilerplatesDataInput {
  githubId?: String
  name?: String
  owner?: String
  githubIssue?: Int
  githubPR?: Int
  installation?: InstallationUpdateOneRequiredWithoutRepositoriesInput
}

export type BoilerplateWhereUniqueInput = AtLeastOne<{
  id: ID_Input
  name?: String
}>

export interface InstallationUpsertWithoutRepositoriesInput {
  update: InstallationUpdateWithoutRepositoriesDataInput
  create: InstallationCreateWithoutRepositoriesInput
}

export interface BoilerplateWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTimeInput
  createdAt_not?: DateTimeInput
  createdAt_in?: DateTimeInput[] | DateTimeInput
  createdAt_not_in?: DateTimeInput[] | DateTimeInput
  createdAt_lt?: DateTimeInput
  createdAt_lte?: DateTimeInput
  createdAt_gt?: DateTimeInput
  createdAt_gte?: DateTimeInput
  updatedAt?: DateTimeInput
  updatedAt_not?: DateTimeInput
  updatedAt_in?: DateTimeInput[] | DateTimeInput
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput
  updatedAt_lt?: DateTimeInput
  updatedAt_lte?: DateTimeInput
  updatedAt_gt?: DateTimeInput
  updatedAt_gte?: DateTimeInput
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  path?: String
  path_not?: String
  path_in?: String[] | String
  path_not_in?: String[] | String
  path_lt?: String
  path_lte?: String
  path_gt?: String
  path_gte?: String
  path_contains?: String
  path_not_contains?: String
  path_starts_with?: String
  path_not_starts_with?: String
  path_ends_with?: String
  path_not_ends_with?: String
  repository?: RepositoryWhereInput
  AND?: BoilerplateWhereInput[] | BoilerplateWhereInput
  OR?: BoilerplateWhereInput[] | BoilerplateWhereInput
  NOT?: BoilerplateWhereInput[] | BoilerplateWhereInput
}

export interface RepositoryCreateWithoutInstallationInput {
  githubId: String
  name: String
  owner: String
  boilerplates?: BoilerplateCreateManyWithoutRepositoryInput
  githubIssue: Int
  githubPR: Int
}

export interface RepositoryUpsertWithoutBoilerplatesInput {
  update: RepositoryUpdateWithoutBoilerplatesDataInput
  create: RepositoryCreateWithoutBoilerplatesInput
}

export interface BoilerplateCreateInput {
  name: String
  description: String
  path: String
  repository: RepositoryCreateOneWithoutBoilerplatesInput
}

export interface InstallationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: InstallationWhereInput
  AND?:
    | InstallationSubscriptionWhereInput[]
    | InstallationSubscriptionWhereInput
  OR?: InstallationSubscriptionWhereInput[] | InstallationSubscriptionWhereInput
  NOT?:
    | InstallationSubscriptionWhereInput[]
    | InstallationSubscriptionWhereInput
}

export interface RepositoryCreateOneWithoutBoilerplatesInput {
  create?: RepositoryCreateWithoutBoilerplatesInput
  connect?: RepositoryWhereUniqueInput
}

export interface RepositoryUpdateManyMutationInput {
  githubId?: String
  name?: String
  owner?: String
  githubIssue?: Int
  githubPR?: Int
}

export interface RepositoryCreateWithoutBoilerplatesInput {
  githubId: String
  name: String
  owner: String
  githubIssue: Int
  githubPR: Int
  installation: InstallationCreateOneWithoutRepositoriesInput
}

export interface RepositoryCreateInput {
  githubId: String
  name: String
  owner: String
  boilerplates?: BoilerplateCreateManyWithoutRepositoryInput
  githubIssue: Int
  githubPR: Int
  installation: InstallationCreateOneWithoutRepositoriesInput
}

export interface InstallationCreateOneWithoutRepositoriesInput {
  create?: InstallationCreateWithoutRepositoriesInput
  connect?: InstallationWhereUniqueInput
}

export interface RepositoryUpsertWithWhereUniqueWithoutInstallationInput {
  where: RepositoryWhereUniqueInput
  update: RepositoryUpdateWithoutInstallationDataInput
  create: RepositoryCreateWithoutInstallationInput
}

export interface InstallationCreateWithoutRepositoriesInput {
  githubId: String
}

export interface BoilerplateUpsertWithWhereUniqueWithoutRepositoryInput {
  where: BoilerplateWhereUniqueInput
  update: BoilerplateUpdateWithoutRepositoryDataInput
  create: BoilerplateCreateWithoutRepositoryInput
}

export interface BoilerplateUpdateInput {
  name?: String
  description?: String
  path?: String
  repository?: RepositoryUpdateOneRequiredWithoutBoilerplatesInput
}

export interface BoilerplateUpdateWithWhereUniqueWithoutRepositoryInput {
  where: BoilerplateWhereUniqueInput
  data: BoilerplateUpdateWithoutRepositoryDataInput
}

export interface RepositoryUpdateOneRequiredWithoutBoilerplatesInput {
  create?: RepositoryCreateWithoutBoilerplatesInput
  update?: RepositoryUpdateWithoutBoilerplatesDataInput
  upsert?: RepositoryUpsertWithoutBoilerplatesInput
  connect?: RepositoryWhereUniqueInput
}

export type RepositoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input
  githubId?: String
}>

export interface InstallationUpdateInput {
  githubId?: String
  repositories?: RepositoryUpdateManyWithoutInstallationInput
}

export interface RepositoryUpdateWithWhereUniqueWithoutInstallationInput {
  where: RepositoryWhereUniqueInput
  data: RepositoryUpdateWithoutInstallationDataInput
}

export interface InstallationUpdateOneRequiredWithoutRepositoriesInput {
  create?: InstallationCreateWithoutRepositoriesInput
  update?: InstallationUpdateWithoutRepositoriesDataInput
  upsert?: InstallationUpsertWithoutRepositoriesInput
  connect?: InstallationWhereUniqueInput
}

export interface RepositorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: RepositoryWhereInput
  AND?: RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput
  OR?: RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput
  NOT?: RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput
}

export interface InstallationUpdateWithoutRepositoriesDataInput {
  githubId?: String
}

export interface RepositoryUpdateInput {
  githubId?: String
  name?: String
  owner?: String
  boilerplates?: BoilerplateUpdateManyWithoutRepositoryInput
  githubIssue?: Int
  githubPR?: Int
  installation?: InstallationUpdateOneRequiredWithoutRepositoriesInput
}

export interface RepositoryWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTimeInput
  createdAt_not?: DateTimeInput
  createdAt_in?: DateTimeInput[] | DateTimeInput
  createdAt_not_in?: DateTimeInput[] | DateTimeInput
  createdAt_lt?: DateTimeInput
  createdAt_lte?: DateTimeInput
  createdAt_gt?: DateTimeInput
  createdAt_gte?: DateTimeInput
  updatedAt?: DateTimeInput
  updatedAt_not?: DateTimeInput
  updatedAt_in?: DateTimeInput[] | DateTimeInput
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput
  updatedAt_lt?: DateTimeInput
  updatedAt_lte?: DateTimeInput
  updatedAt_gt?: DateTimeInput
  updatedAt_gte?: DateTimeInput
  githubId?: String
  githubId_not?: String
  githubId_in?: String[] | String
  githubId_not_in?: String[] | String
  githubId_lt?: String
  githubId_lte?: String
  githubId_gt?: String
  githubId_gte?: String
  githubId_contains?: String
  githubId_not_contains?: String
  githubId_starts_with?: String
  githubId_not_starts_with?: String
  githubId_ends_with?: String
  githubId_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  owner?: String
  owner_not?: String
  owner_in?: String[] | String
  owner_not_in?: String[] | String
  owner_lt?: String
  owner_lte?: String
  owner_gt?: String
  owner_gte?: String
  owner_contains?: String
  owner_not_contains?: String
  owner_starts_with?: String
  owner_not_starts_with?: String
  owner_ends_with?: String
  owner_not_ends_with?: String
  boilerplates_every?: BoilerplateWhereInput
  boilerplates_some?: BoilerplateWhereInput
  boilerplates_none?: BoilerplateWhereInput
  githubIssue?: Int
  githubIssue_not?: Int
  githubIssue_in?: Int[] | Int
  githubIssue_not_in?: Int[] | Int
  githubIssue_lt?: Int
  githubIssue_lte?: Int
  githubIssue_gt?: Int
  githubIssue_gte?: Int
  githubPR?: Int
  githubPR_not?: Int
  githubPR_in?: Int[] | Int
  githubPR_not_in?: Int[] | Int
  githubPR_lt?: Int
  githubPR_lte?: Int
  githubPR_gt?: Int
  githubPR_gte?: Int
  installation?: InstallationWhereInput
  AND?: RepositoryWhereInput[] | RepositoryWhereInput
  OR?: RepositoryWhereInput[] | RepositoryWhereInput
  NOT?: RepositoryWhereInput[] | RepositoryWhereInput
}

export type InstallationWhereUniqueInput = AtLeastOne<{
  id: ID_Input
  githubId?: String
}>

export interface InstallationWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTimeInput
  createdAt_not?: DateTimeInput
  createdAt_in?: DateTimeInput[] | DateTimeInput
  createdAt_not_in?: DateTimeInput[] | DateTimeInput
  createdAt_lt?: DateTimeInput
  createdAt_lte?: DateTimeInput
  createdAt_gt?: DateTimeInput
  createdAt_gte?: DateTimeInput
  updatedAt?: DateTimeInput
  updatedAt_not?: DateTimeInput
  updatedAt_in?: DateTimeInput[] | DateTimeInput
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput
  updatedAt_lt?: DateTimeInput
  updatedAt_lte?: DateTimeInput
  updatedAt_gt?: DateTimeInput
  updatedAt_gte?: DateTimeInput
  githubId?: String
  githubId_not?: String
  githubId_in?: String[] | String
  githubId_not_in?: String[] | String
  githubId_lt?: String
  githubId_lte?: String
  githubId_gt?: String
  githubId_gte?: String
  githubId_contains?: String
  githubId_not_contains?: String
  githubId_starts_with?: String
  githubId_not_starts_with?: String
  githubId_ends_with?: String
  githubId_not_ends_with?: String
  repositories_every?: RepositoryWhereInput
  repositories_some?: RepositoryWhereInput
  repositories_none?: RepositoryWhereInput
  AND?: InstallationWhereInput[] | InstallationWhereInput
  OR?: InstallationWhereInput[] | InstallationWhereInput
  NOT?: InstallationWhereInput[] | InstallationWhereInput
}

export interface BoilerplateUpdateManyWithoutRepositoryInput {
  create?:
    | BoilerplateCreateWithoutRepositoryInput[]
    | BoilerplateCreateWithoutRepositoryInput
  delete?: BoilerplateWhereUniqueInput[] | BoilerplateWhereUniqueInput
  connect?: BoilerplateWhereUniqueInput[] | BoilerplateWhereUniqueInput
  disconnect?: BoilerplateWhereUniqueInput[] | BoilerplateWhereUniqueInput
  update?:
    | BoilerplateUpdateWithWhereUniqueWithoutRepositoryInput[]
    | BoilerplateUpdateWithWhereUniqueWithoutRepositoryInput
  upsert?:
    | BoilerplateUpsertWithWhereUniqueWithoutRepositoryInput[]
    | BoilerplateUpsertWithWhereUniqueWithoutRepositoryInput
}

export interface BoilerplateUpdateManyMutationInput {
  name?: String
  description?: String
  path?: String
}

export interface RepositoryUpdateManyWithoutInstallationInput {
  create?:
    | RepositoryCreateWithoutInstallationInput[]
    | RepositoryCreateWithoutInstallationInput
  delete?: RepositoryWhereUniqueInput[] | RepositoryWhereUniqueInput
  connect?: RepositoryWhereUniqueInput[] | RepositoryWhereUniqueInput
  disconnect?: RepositoryWhereUniqueInput[] | RepositoryWhereUniqueInput
  update?:
    | RepositoryUpdateWithWhereUniqueWithoutInstallationInput[]
    | RepositoryUpdateWithWhereUniqueWithoutInstallationInput
  upsert?:
    | RepositoryUpsertWithWhereUniqueWithoutInstallationInput[]
    | RepositoryUpsertWithWhereUniqueWithoutInstallationInput
}

export interface RepositoryCreateManyWithoutInstallationInput {
  create?:
    | RepositoryCreateWithoutInstallationInput[]
    | RepositoryCreateWithoutInstallationInput
  connect?: RepositoryWhereUniqueInput[] | RepositoryWhereUniqueInput
}

export interface InstallationCreateInput {
  githubId: String
  repositories?: RepositoryCreateManyWithoutInstallationInput
}

export interface BoilerplateCreateManyWithoutRepositoryInput {
  create?:
    | BoilerplateCreateWithoutRepositoryInput[]
    | BoilerplateCreateWithoutRepositoryInput
  connect?: BoilerplateWhereUniqueInput[] | BoilerplateWhereUniqueInput
}

export interface BoilerplateCreateWithoutRepositoryInput {
  name: String
  description: String
  path: String
}

export interface BoilerplateSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: BoilerplateWhereInput
  AND?: BoilerplateSubscriptionWhereInput[] | BoilerplateSubscriptionWhereInput
  OR?: BoilerplateSubscriptionWhereInput[] | BoilerplateSubscriptionWhereInput
  NOT?: BoilerplateSubscriptionWhereInput[] | BoilerplateSubscriptionWhereInput
}

export interface RepositoryUpdateWithoutInstallationDataInput {
  githubId?: String
  name?: String
  owner?: String
  boilerplates?: BoilerplateUpdateManyWithoutRepositoryInput
  githubIssue?: Int
  githubPR?: Int
}

export interface BoilerplateUpdateWithoutRepositoryDataInput {
  name?: String
  description?: String
  path?: String
}

export interface InstallationUpdateManyMutationInput {
  githubId?: String
}

export interface NodeNode {
  id: ID_Output
}

export interface RepositoryPreviousValues {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  githubId: String
  name: String
  owner: String
  githubIssue: Int
  githubPR: Int
}

export interface RepositoryPreviousValuesPromise
  extends Promise<RepositoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  githubId: () => Promise<String>
  name: () => Promise<String>
  owner: () => Promise<String>
  githubIssue: () => Promise<Int>
  githubPR: () => Promise<Int>
}

export interface RepositoryPreviousValuesSubscription
  extends Promise<AsyncIterator<RepositoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  githubId: () => Promise<AsyncIterator<String>>
  name: () => Promise<AsyncIterator<String>>
  owner: () => Promise<AsyncIterator<String>>
  githubIssue: () => Promise<AsyncIterator<Int>>
  githubPR: () => Promise<AsyncIterator<Int>>
}

export interface BoilerplateEdge {
  cursor: String
}

export interface BoilerplateEdgePromise
  extends Promise<BoilerplateEdge>,
    Fragmentable {
  node: <T = Boilerplate>() => T
  cursor: () => Promise<String>
}

export interface BoilerplateEdgeSubscription
  extends Promise<AsyncIterator<BoilerplateEdge>>,
    Fragmentable {
  node: <T = BoilerplateSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface InstallationSubscriptionPayload {
  mutation: MutationType
  updatedFields?: String[]
}

export interface InstallationSubscriptionPayloadPromise
  extends Promise<InstallationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = Installation>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = InstallationPreviousValues>() => T
}

export interface InstallationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InstallationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = InstallationSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = InstallationPreviousValuesSubscription>() => T
}

export interface BatchPayload {
  count: Long
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>
}

export interface AggregateRepository {
  count: Int
}

export interface AggregateRepositoryPromise
  extends Promise<AggregateRepository>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateRepositorySubscription
  extends Promise<AsyncIterator<AggregateRepository>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>
  hasPreviousPage: () => Promise<Boolean>
  startCursor: () => Promise<String>
  endCursor: () => Promise<String>
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>
  startCursor: () => Promise<AsyncIterator<String>>
  endCursor: () => Promise<AsyncIterator<String>>
}

export interface RepositoryConnection {}

export interface RepositoryConnectionPromise
  extends Promise<RepositoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T
  edges: <T = FragmentableArray<RepositoryEdge>>() => T
  aggregate: <T = AggregateRepository>() => T
}

export interface RepositoryConnectionSubscription
  extends Promise<AsyncIterator<RepositoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<RepositoryEdgeSubscription>>>() => T
  aggregate: <T = AggregateRepositorySubscription>() => T
}

export interface BoilerplateConnection {}

export interface BoilerplateConnectionPromise
  extends Promise<BoilerplateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T
  edges: <T = FragmentableArray<BoilerplateEdge>>() => T
  aggregate: <T = AggregateBoilerplate>() => T
}

export interface BoilerplateConnectionSubscription
  extends Promise<AsyncIterator<BoilerplateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<BoilerplateEdgeSubscription>>>() => T
  aggregate: <T = AggregateBoilerplateSubscription>() => T
}

export interface InstallationEdge {
  cursor: String
}

export interface InstallationEdgePromise
  extends Promise<InstallationEdge>,
    Fragmentable {
  node: <T = Installation>() => T
  cursor: () => Promise<String>
}

export interface InstallationEdgeSubscription
  extends Promise<AsyncIterator<InstallationEdge>>,
    Fragmentable {
  node: <T = InstallationSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface Repository {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  githubId: String
  name: String
  owner: String
  githubIssue: Int
  githubPR: Int
}

export interface RepositoryPromise extends Promise<Repository>, Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  githubId: () => Promise<String>
  name: () => Promise<String>
  owner: () => Promise<String>
  boilerplates: <T = FragmentableArray<Boilerplate>>(
    args?: {
      where?: BoilerplateWhereInput
      orderBy?: BoilerplateOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
  githubIssue: () => Promise<Int>
  githubPR: () => Promise<Int>
  installation: <T = Installation>() => T
}

export interface RepositorySubscription
  extends Promise<AsyncIterator<Repository>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  githubId: () => Promise<AsyncIterator<String>>
  name: () => Promise<AsyncIterator<String>>
  owner: () => Promise<AsyncIterator<String>>
  boilerplates: <T = Promise<AsyncIterator<BoilerplateSubscription>>>(
    args?: {
      where?: BoilerplateWhereInput
      orderBy?: BoilerplateOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
  githubIssue: () => Promise<AsyncIterator<Int>>
  githubPR: () => Promise<AsyncIterator<Int>>
  installation: <T = InstallationSubscription>() => T
}

export interface Boilerplate {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  name: String
  description: String
  path: String
}

export interface BoilerplatePromise extends Promise<Boilerplate>, Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  name: () => Promise<String>
  description: () => Promise<String>
  path: () => Promise<String>
  repository: <T = Repository>() => T
}

export interface BoilerplateSubscription
  extends Promise<AsyncIterator<Boilerplate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  name: () => Promise<AsyncIterator<String>>
  description: () => Promise<AsyncIterator<String>>
  path: () => Promise<AsyncIterator<String>>
  repository: <T = RepositorySubscription>() => T
}

export interface Installation {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  githubId: String
}

export interface InstallationPromise
  extends Promise<Installation>,
    Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  githubId: () => Promise<String>
  repositories: <T = FragmentableArray<Repository>>(
    args?: {
      where?: RepositoryWhereInput
      orderBy?: RepositoryOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
}

export interface InstallationSubscription
  extends Promise<AsyncIterator<Installation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  githubId: () => Promise<AsyncIterator<String>>
  repositories: <T = Promise<AsyncIterator<RepositorySubscription>>>(
    args?: {
      where?: RepositoryWhereInput
      orderBy?: RepositoryOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
}

export interface BoilerplatePreviousValues {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  name: String
  description: String
  path: String
}

export interface BoilerplatePreviousValuesPromise
  extends Promise<BoilerplatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  name: () => Promise<String>
  description: () => Promise<String>
  path: () => Promise<String>
}

export interface BoilerplatePreviousValuesSubscription
  extends Promise<AsyncIterator<BoilerplatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  name: () => Promise<AsyncIterator<String>>
  description: () => Promise<AsyncIterator<String>>
  path: () => Promise<AsyncIterator<String>>
}

export interface BoilerplateSubscriptionPayload {
  mutation: MutationType
  updatedFields?: String[]
}

export interface BoilerplateSubscriptionPayloadPromise
  extends Promise<BoilerplateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = Boilerplate>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = BoilerplatePreviousValues>() => T
}

export interface BoilerplateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoilerplateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = BoilerplateSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = BoilerplatePreviousValuesSubscription>() => T
}

export interface InstallationPreviousValues {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  githubId: String
}

export interface InstallationPreviousValuesPromise
  extends Promise<InstallationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  githubId: () => Promise<String>
}

export interface InstallationPreviousValuesSubscription
  extends Promise<AsyncIterator<InstallationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  githubId: () => Promise<AsyncIterator<String>>
}

export interface AggregateBoilerplate {
  count: Int
}

export interface AggregateBoilerplatePromise
  extends Promise<AggregateBoilerplate>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateBoilerplateSubscription
  extends Promise<AsyncIterator<AggregateBoilerplate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface InstallationConnection {}

export interface InstallationConnectionPromise
  extends Promise<InstallationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T
  edges: <T = FragmentableArray<InstallationEdge>>() => T
  aggregate: <T = AggregateInstallation>() => T
}

export interface InstallationConnectionSubscription
  extends Promise<AsyncIterator<InstallationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<InstallationEdgeSubscription>>>() => T
  aggregate: <T = AggregateInstallationSubscription>() => T
}

export interface AggregateInstallation {
  count: Int
}

export interface AggregateInstallationPromise
  extends Promise<AggregateInstallation>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateInstallationSubscription
  extends Promise<AsyncIterator<AggregateInstallation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface RepositoryEdge {
  cursor: String
}

export interface RepositoryEdgePromise
  extends Promise<RepositoryEdge>,
    Fragmentable {
  node: <T = Repository>() => T
  cursor: () => Promise<String>
}

export interface RepositoryEdgeSubscription
  extends Promise<AsyncIterator<RepositoryEdge>>,
    Fragmentable {
  node: <T = RepositorySubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface RepositorySubscriptionPayload {
  mutation: MutationType
  updatedFields?: String[]
}

export interface RepositorySubscriptionPayloadPromise
  extends Promise<RepositorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = Repository>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = RepositoryPreviousValues>() => T
}

export interface RepositorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RepositorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = RepositorySubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = RepositoryPreviousValuesSubscription>() => T
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

export type Long = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `${process.env['PRISMA_ENDPOINT']}`,
  secret: `${process.env['PRISMA_SECRET']}`,
})
export const prisma = new Prisma()
